package org.vadere.simulator.models.seating;

import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.apache.commons.math3.distribution.EnumeratedDistribution;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.distribution.RealDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.Pair;
import org.apache.log4j.Logger;
import org.vadere.simulator.control.ActiveCallback;
import org.vadere.simulator.models.Model;
import org.vadere.state.attributes.Attributes;
import org.vadere.state.attributes.models.AttributesSeating;
import org.vadere.state.attributes.scenario.AttributesAgent;
import org.vadere.state.scenario.Pedestrian;
import org.vadere.state.scenario.Topography;

import com.vividsolutions.jts.math.MathUtil;

/**
 * This model can only be used with train scenarios complying with scenarios generated by Traingen.
 * 
 * To enable this model, add this model's class name to the main model's submodel list and
 * load a train topography.
 *
 */
public class SeatingModel implements ActiveCallback, Model {

	private final Logger log = Logger.getLogger(SeatingModel.class);
	
	private AttributesSeating attributes;
	private TrainModel trainModel;
	private Topography topography;
	private Random random;
	/** Used for distributions from Apache Commons Math. */
	private RandomGenerator rng = new JDKRandomGenerator(random.nextInt());

	@Override
	public void preLoop(double simTimeInSec) {
		// before simulation
	}

	@Override
	public void postLoop(double simTimeInSec) {
		// after simulation
	}

	@Override
	public void update(double simTimeInSec) {
		final int seatCount = trainModel.getSeats().size();
		trainModel.getPedestrians().stream()
				.filter(p -> p.getTargets().isEmpty())
				.forEach(p -> p.getTargets().add(random.nextInt(seatCount)));
	}

	@Override
	public void initialize(List<Attributes> attributesList, Topography topography,
			AttributesAgent attributesPedestrian, Random random) {
		this.attributes = Model.findAttributes(attributesList, AttributesSeating.class);
		this.topography = topography;
		this.trainModel = new TrainModel(topography);
		this.random = random;
	}

	public TrainModel getTrainModel() {
		return trainModel;
	}

	public int chooseCompartment(Pedestrian person, int entranceAreaIndex) {
		// entrance areas:    0   1   2   3
		// compartments:    0   1   2   3   4
		// left- and rightmost compartments are "half compartments"

		final int entranceAreaCount = trainModel.getNumberOfEntranceAreas();

		final double distributionMean = entranceAreaIndex + 0.5;
		final double distributionSd = entranceAreaCount / 6.0;
		final RealDistribution distribution = new NormalDistribution(distributionMean, distributionSd);

		final double value = MathUtil.clamp(distribution.sample(), 0, entranceAreaCount);
		return (int) Math.round(value);
	}
	
	public int chooseSeatGroup(int compartmentIndex) {
		final List<SeatGroup> seatGroups = trainModel.getCompartment(compartmentIndex).getSeatGroups();
		final List<Pair<Boolean, Double>> valuesAndProbabilities = attributes.getSeatGroupChoice();
		final EnumeratedDistribution<Boolean> distribution = new EnumeratedDistribution<>(rng, valuesAndProbabilities);
		final List<SeatGroup> chosenSeatGroup = chooseFromSeatGroupsRecursively(seatGroups, distribution);
		return chosenSeatGroup.get(0).getIndex(); // TODO wrong kind of index
	}
	
	private List<SeatGroup> chooseFromSeatGroupsRecursively(List<SeatGroup> seatGroups,
			EnumeratedDistribution<Boolean> distribution) {

		final IntStream seatGroupPersonCounts = seatGroups.stream().mapToInt(SeatGroup::getPersonCount);

		if (seatGroupPersonCounts.distinct().count() == 1) {
			return Collections.singletonList(drawRandomElement(seatGroups));
		}

		final int minPersonCount = seatGroupPersonCounts
				.reduce(Integer::min).getAsInt();

		if (distribution.sample()) {
			// choice for seat group with minimal number of other passengers
			final List<SeatGroup> minSeatGroups = seatGroups.stream()
					.filter(sg -> sg.getPersonCount() == minPersonCount)
					.collect(Collectors.toList());
			return chooseFromSeatGroupsRecursively(minSeatGroups, distribution);
		} else {
			final List<SeatGroup> otherSeatGroups = seatGroups.stream()
					.filter(sg -> sg.getPersonCount() != minPersonCount)
					.collect(Collectors.toList());
			return chooseFromSeatGroupsRecursively(otherSeatGroups, distribution);
		}
	}

	private <T> T drawRandomElement(List<T> list) {
		return list.get(random.nextInt(list.size()));
	}

	public int chooseSeat(int seatGroupIndex) {
		final int personsSitting = 1; // TODO count persons sitting in seat group
		switch (personsSitting) {
		case 0:
			// TODO choose according to data
			return 0;

		case 1:
			// TODO choose according to data
			return 0;

		case 2:
			// TODO choose according to data
			// ignore features of persons
			// look at direction and side
			return 0;

		case 3:
			// TODO choose the seat left
			return 0;

		default:
			assert personsSitting == 4;
			throw new RuntimeException(String.format(
					"Seat group is already full. This method should not have been called!",
					personsSitting));
		}
	}

}
